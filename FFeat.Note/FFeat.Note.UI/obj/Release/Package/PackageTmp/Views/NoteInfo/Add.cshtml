@model FFeat.Note.Model.NoteInfo

@using FFeat.Note.Model
@{
    ViewBag.Title = "Add";
}
<script src="~/Scripts/jquery.unobtrusive-ajax.min.js"></script>
<script src="~/Scripts/ckeditor/ckeditor.js"></script>
<script src="~/Scripts/ckeditor/lang/zh-cn.js"></script>
<style>
    select {
        color: black;
    }

    /*#NoteType {
        color: black;
    }*/
</style>
<script>
    function afterAdd(data) {
        if (data == "ok") {
            alert("添加成功");
            window.location.href = "/noteinfo/index";
        }
        else {
            alert(data);
        }
    }
</script>
<div class="container" id="page-content">

    <h2>添加</h2>

    @using (Ajax.BeginForm(new AjaxOptions() { OnSuccess = "afterAdd" }))
    {
        @*@Html.AntiForgeryToken()*@

        <div class="form-horizontal">
            <h4>文章</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group">
                @Html.LabelFor(model => model.NoteName, "文章名：", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.NoteName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.NoteName, "", new { @class = "text-danger" })
                </div>
            </div>


            @Html.HiddenFor(model => model.SubTime, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.SubTime, "", new { @class = "text-danger" })

            @Html.HiddenFor(model => model.DelFlag, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.DelFlag, "", new { @class = "text-danger" })

            <div class="form-group">
                @Html.LabelFor(model => model.NoteType, "文章类别", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownListFor(m => m.NoteType, (IEnumerable<SelectListItem>)ViewBag.NoteTypeList, new { htmlAttributes = new { @class = "form-control" } })
                    @*@Html.EnumDropDownListFor(m => (EnumNote)Enum.ToObject(typeof(EnumNote), m.NoteType), new FFeat.Note.Model.EnumNote())*@

                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.SubContent, "内容：", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @*@Html.EditorFor(model => model.SubContent, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.SubContent, "", new { @class = "text-danger" })*@
                    <textarea name="SubContent" id="SubContent"></textarea>
                </div>
            </div>


            @*<div class="form-group">
                    @Html.LabelFor(model => model.UserInfoId, "UserInfoId", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownList("UserInfoId", null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.UserInfoId, "", new { @class = "text-danger" })
                    </div>
                </div>*@

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="提交" class="btn btn-default" />
                </div>
            </div>
        </div>
    }

    <div>
        @Html.ActionLink("返回列表", "Index")
    </div>
</div>
<script>
    $(function () {
        var tempForm = CKEDITOR.replace('SubContent');
        var tempData = CKEDITOR.instances.tempForm.getData();
    })


</script>